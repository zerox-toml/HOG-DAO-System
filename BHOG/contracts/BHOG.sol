// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/*
@@@@@@@@@@@@@@#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@JG@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@# &@#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@& ^@5J@@@@@@@@&5G@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@J  #G J&@@&B?^7&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@&BGPPY^   5@       7#@&@@@@@@@@@@@&P5&@@@@@P5&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@P^~@@@@@@@@@@@@@@@@@@@P~::Y@@@@@@@@B5JJYG&@@@@@@@@@@@@@@@@@@@@&^^#@
@&#GY??JPG5?~...~&@G. .~5GJ7B@@@@@@@@@@@@G  5@@@@B  Y@@@&###&@@@@&&&@&##@@@@@@@&##@?  &@@@@@@@@&###@@@@@J  JP&@@@@@&!  :~!~. Y@@@@&###&@@@@@@&##&G  G@
@@@@@@#J.  :7#@@@@@@@@@P: .@@@@@@@@@@@@@@B  7BGGBJ  5@@!.^^: .G@@~  ...  ^@@@7  .:.   &@@@@@@P: .:. :G@~   ::#@@@@@. .&@@@@@&@@@P: .:. :P@@Y. .:..  G@
@@@@@@@@@Y   .@@@@@@@@G   .&@@@@@@@@@@@@@B  .::::.  5@@#5YYY.  @@~  #@@B  J@!  #@@@~  &@@@@@G  5@@@5  G@?  &@@@@@@&  7@@@@@5.~@G  5@@@5  BG  P@@@Y  G@
@@@@@@@@@P  !&@@@@@@@@@P~.  ^P&@@@@@@@@@@B  5@@@@B  Y@5  YBG.  @@~ .@@@&  ?@J  P@@&:  &@@@@@B  ?@@@7  #@?  &@@@@@@@7  ?#@@@^  @B  ?@@@7  #B  ?@@&7  G@
@@@@@@@&57PG?:  ~@@P...:!YPG5J?J5B&@@@@@@B  P@@@@#  P@&^.:~!^ .@@! :@@@&. Y@@P: ..:: .&@@@@@@#!.....!#@@Y .&@@@@@@@@#!. ....^Y@@#!.....!#@@B^ ...^. B@
@@@@@@&&&P:      !@.   75PGG#@@@@@@@@@@@@@@@@@@@@@@@@@@@@&&@@@@@@@@@@@@@@@@@@@@@&@@@@@@@@@@@@@@@@&@@@@@@@@@@@@@@@@@@@@@@&&@@@@@@@@@@&@@@@@@@@@@&@@@@@@
@@@@@@@G^~P&@@@#: @~  &@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@&PG@@@@@@@@@^@# ^@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@#@@J.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@7&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

$BHOG serves as the protocol's stabilization mechanism, incentivizing HOG supply adjustments during contraction periods.
*/

import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol";

import "./owner/Operator.sol";

contract BHOG is ERC20Burnable, Operator {
    /**
     * @notice Constructs the Bond HOG ERC-20 contract.
     */
    constructor() ERC20("BHOG", "BHOG") {}

    /**
     * @notice Operator mints basis bonds to a recipient
     * @param recipient_ The address of recipient
     * @param amount_ The amount of basis bonds to mint to
     * @return whether the process has been done
     */
    function mint(address recipient_, uint256 amount_) public onlyOperator returns (bool) {
        uint256 balanceBefore = balanceOf(recipient_);
        _mint(recipient_, amount_);
        uint256 balanceAfter = balanceOf(recipient_);

        return balanceAfter > balanceBefore;
    }

    function burn(uint256 amount) public override {
        super.burn(amount);
    }

    function burnFrom(address account, uint256 amount) public override onlyOperator {
        super.burnFrom(account, amount);
    }
}
